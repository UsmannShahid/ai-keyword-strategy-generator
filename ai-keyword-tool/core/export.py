"""
Export functionality for AI Keyword Tool sessions.
"""

import os
import json
from datetime import datetime
from .db import get_full_session_data

def export_to_markdown(session_id, session_data, return_content=False):
    """
    Export a complete session to Markdown format.
    
    Args:
        session_id: Session identifier
        session_data: Dictionary containing session, brief, suggestions, and serp data
        return_content: If True, return content string instead of file path
        
    Returns:
        str: Absolute path to the exported Markdown file or content string
    """
    
    if not session_data or not session_data.get("session"):
        raise ValueError("Invalid session data provided")
    
    session = session_data["session"]
    brief = session_data.get("brief")
    suggestions = session_data.get("suggestions", [])
    serp = session_data.get("serp")
    
    # Create filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    topic_clean = session["topic"].replace(" ", "_").replace("-", "_")[:50]
    filename = f"{topic_clean}_{timestamp}.md"
    
    # Build Markdown content
    markdown_content = []
    
    # Header
    markdown_content.append("# Content Strategy Export")
    markdown_content.append(f"## {session['topic']}")
    markdown_content.append("")
    markdown_content.append(f"**Session ID:** `{session_id}`")
    
    # Format creation date
    try:
        created_dt = datetime.fromisoformat(session['created_at'].replace('T', ' ').replace('Z', ''))
        formatted_date = created_dt.strftime("%B %d, %Y at %I:%M %p")
    except:
        formatted_date = session['created_at']
    
    markdown_content.append(f"**Created:** {formatted_date}")
    markdown_content.append("**Generated by:** AI Keyword Strategy Tool")
    markdown_content.append("")
    markdown_content.append("---")
    markdown_content.append("")
    
    # Content Brief Section
    if brief and brief.get("content"):
        markdown_content.append("## Content Brief")
        markdown_content.append("")
        markdown_content.append(brief["content"])
        markdown_content.append("")
        markdown_content.append("---")
        markdown_content.append("")
    
    # AI Suggestions Section
    if suggestions:
        markdown_content.append("## AI Strategy Suggestions")
        markdown_content.append("")
        
        # Group suggestions by variant
        suggestion_groups = {}
        for suggestion in suggestions:
            variant = suggestion.get("variant", "default")
            if variant not in suggestion_groups:
                suggestion_groups[variant] = []
            suggestion_groups[variant].append(suggestion)
        
        for variant, variant_suggestions in suggestion_groups.items():
            if variant != "default":
                variant_title = variant.replace("_", " ").title()
                markdown_content.append(f"### {variant_title}")
                markdown_content.append("")
            
            for suggestion in variant_suggestions:
                markdown_content.append(suggestion["content"])
                markdown_content.append("")
        
        markdown_content.append("---")
        markdown_content.append("")
    
    # SERP Analysis Section
    if serp and serp.get("data"):
        markdown_content.append("## SERP Analysis")
        markdown_content.append("")
        
        try:
            # Try to parse SERP data as JSON
            serp_data = json.loads(serp["data"])
            
            if isinstance(serp_data, list) and len(serp_data) > 0:
                markdown_content.append("### Top Search Results")
                markdown_content.append("")
                
                for i, result in enumerate(serp_data[:5], 1):
                    if isinstance(result, dict):
                        title = result.get("title", "No title")
                        url = result.get("url", "No URL")
                        snippet = result.get("snippet", "No snippet")
                        
                        markdown_content.append(f"**{i}. {title}**")
                        markdown_content.append(f"- URL: {url}")
                        markdown_content.append(f"- Snippet: {snippet}")
                        markdown_content.append("")
            else:
                markdown_content.append("SERP data available but not in expected format.")
                
        except json.JSONDecodeError:
            # If not JSON, treat as plain text
            serp_preview = serp["data"][:500] + "..." if len(serp["data"]) > 500 else serp["data"]
            markdown_content.append(f"```\n{serp_preview}\n```")
        
        markdown_content.append("")
        markdown_content.append("---")
        markdown_content.append("")
    
    # Footer
    markdown_content.append("## Export Information")
    markdown_content.append("")
    markdown_content.append(f"- **Export Date:** {datetime.now().strftime('%B %d, %Y at %I:%M %p')}")
    markdown_content.append("- **Tool Version:** AI Keyword Strategy Tool v1.0")
    markdown_content.append("- **Format:** Markdown")
    markdown_content.append("")
    markdown_content.append("---")
    markdown_content.append("")
    markdown_content.append("*Generated with AI Keyword Strategy Tool*")
    
    # Prepare content
    full_content = "\n".join(markdown_content)
    
    # Return content directly if requested
    if return_content:
        return full_content
    
    # Otherwise write to file
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(full_content)
        
        return os.path.abspath(filename)
        
    except Exception as e:
        raise Exception(f"Failed to write Markdown file: {str(e)}")


def get_export_summary(session_data):
    """
    Get a summary of what will be exported.
    
    Args:
        session_data: Dictionary containing session data
        
    Returns:
        dict: Summary of exportable content
    """
    summary = {
        "has_session": bool(session_data.get("session")),
        "has_brief": bool(session_data.get("brief")),
        "suggestions_count": len(session_data.get("suggestions", [])),
        "has_serp": bool(session_data.get("serp")),
    }
    
    return summary